Types:
Indices = a, b, c, d, e, center1, center2, tmp, game
Cards = Werewolf1, Werewolf2, Troublemaker, Villager1, Villager2, Insomniac, Seer, Robber
Roles = Werewolf, Troublemaker, Villager, Insomniac, Seer, Robber
GoodRole = Troublemaker, Villager, Insomniac, Seer
Players = a, b, c, d, e
Locations = a, b, c, d, e, center1, center2, tmp
PlayLocations = a, b, c, d, e, center1, center2
Centers = center1, center2
Phases = Init, WWPhase, TMPhase, SPhase, IPhase, RPhase, DiscussionPhase, VotingPhase, DeathPhase, Done
Constants = game, tmp
Truth = honest, lying
Count = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
Bool = True, False
Vars = p, x, y, p1, p2, r, s, s1, v, w, self
Properties:
succ :: Count -> Count (0: 1; 1: 2; 2: 3; 3: 4; 4: 5; 5: 6; 6: 7; 7: 8; 8: 9)
max :: Constants -> Count ()
maxat :: Constants -> Locations ()
votes :: Players -> Count ()
voted :: Players -> Players ()
tmpv :: Constants -> Count ()
maxvotes :: Constants -> Count ()
dead :: Players -> Bool ()
role :: Locations -> Roles ()
initrole :: Locations -> Roles()
card :: Locations -> Cards ()
left :: Players -> Players (a: e; b: a; c: b; d: c; e: d)
right :: Players -> Players (a: b; b: c; c: d; d: e; e: a)
roleassignment :: Cards -> Roles (Werewolf1: Werewolf; Werewolf2: Werewolf; Insomniac: Insomniac; Seer: Seer; Troublemaker: Troublemaker; Villager1: Villager; Villager2: Villager; Robber: Robber)
phase :: Constants -> Phases ()
votefor :: Players -> Players ()
liar :: Players -> Count ()
isLiar :: Players -> Bool ()
eq :: Players -> Players (a: a; b: b; c: c; d: d; e: e)
eqt :: Truth -> Truth (honest: honest; lying: lying)
next :: Phase -> Phase (Init: WWPhase; WWPhase: SPhase; SPhase: TMPhase; TMPhase: RPhase; RPhase: IPhase; IPhase: DiscussionPhase; DiscussionPhase: VotingPhase; VotingPhase: DeathPhase; DeathPhase: Done)
seen :: Players -> Players ()
seenRole :: Players -> Roles ()
swapped :: Players -> Bool ()
Actions:
assignCard(p: Players, c(p): Cards)
{
    precondition Forall x in Players: (card(x) != c);
    card(p) = c
}
assignRole(p: Players)
{
    public (Players) role(p) = roleassignment(card(p));
    public (Players) initrole(p) = roleassignment(card(p));
    learn (p): Which r in Roles: role(p) == r;
    public (Players) seen(p) = p
}
causeTrouble(p(p): Players, t(p): Truth)
{
    precondition initrole(p) == Troublemaker;
    if (eqt(t) == honest)
    {
        role(tmp) = role(left(p));
        role(left(p)) = role(right(p));
        role(right(p)) = role(tmp);
        swapped(p) = True
    }
    else
    {
        swapped(p) = False
    }
}
rob(p(p): Players, p1(p): Players)
{
    precondition initrole(p) == Robber;
    if (eq(p) != p1)
    {
        role(tmp) = role(p);
        role(p) = role(p1);
        role(p1) = role(tmp);
        robbed(p) = p1;
        learn (p): Which r in Roles: role(p) == r
    }
    else
    {
        robbed(p) = p
    }
}
insomnia(p: Players)
{
   precondition initrole(p) == Insomniac;
   learn (p): Which r in Roles: role(p) == r
}
see(p(p): Players, p1(p): PlayLocations)
{
   precondition initrole(p) == Seer;
   learn (p) : Which r in Roles: role(p1) == r;
   seen(p) = p1;
   seenRole(p) = role(p1)
}
recognizeWerewolves(p: Players)
{
    precondition initrole(p) == Werewolf;
    tell (p): Each p1 in Players: role(p1) == Werewolf
}
advancePhase()
{
   phase(tmp) = next(phase(game));
   phase(game) = phase(tmp)
} 

claimInitRole(p: Players, r: Roles, r1(p): Roles)
{
    precondition initrole(p) == r1;
    if (initrole(p) == r)
    {
        print("truth")
    }
    else
    {
        addWeight(1);
        print("lie")
    }
}

claimRole(p: Players, r: Roles, r1(p): Roles)
{
    precondition role(p) == r1;
    if (role(p) == r)
    {
        print("truth")
    }
    else
    {
        addWeight(1);
        print("lie")
    }
}

claimSeen(p: Players, s: Players, s1(p): Players)
{
    precondition seen(p) == s1;
    if (seen(p) == s)
    {
       print("truth")
    }
    else
    {
       addWeight(1);
       print("lie")
    }
}
claimSeenRole(p: Players, r: Roles, r1(p): Roles)
{
    precondition seenRole(p) == r1;
    
    if (seenRole(p) == r)
    {
       print("truth")
    }
    else
    {
        addWeight(1);
       print("lie")
    }
    
}

claimSwapped(p: Players, s: Bool, t(p): Bool)
{
    precondition swapped(p) == t;
    if (swapped(p) == s)
    {
       print("truth")
    }
    else
    {
       addWeight(1);
       print("lie")
    }
}

claimRobbed(p: Players, p1: Players, t(p): Players)
{
    precondition robbed(p) == t;
    if (robbed(p) == p1)
    {
       print("truth")
    }
    else
    {
       addWeight(1);
       print("lie")
    }
}
voteCertain(p: Players, v: Players)
{
    precondition B (p): role(v) == Werewolf;
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}

vote(p: Players, v: Players)
{
    precondition W [liar,>0.9] (p): role(v) == Werewolf;
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
vote0(p: Players, v: Players)
{
    precondition Forall p1 in Players: (eq(p1) == p) or (W [liar,<0.9] (p): role(p1) == Werewolf);
    precondition W [liar,>0.75] (p): role(v) == Werewolf;
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
vote1(p: Players, v: Players)
{
    precondition Forall p1 in Players: (eq(p1) == p) or (W [liar,<0.8] (p): role(p1) == Werewolf);
    precondition W [liar,>0.75] (p): role(v) == Werewolf;
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
vote2(p: Players, v: Players)
{
    precondition Forall p1 in Players: (eq(p1) == p) or (W [liar,<0.75] (p): role(p1) == Werewolf);
    precondition W [liar,>0.5] (p): role(v) == Werewolf;
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
vote3(p: Players, v: Players)
{
    precondition Forall p1 in Players: (eq(p1) == p) or (W [liar,<0.5] (p): role(p1) == Werewolf);
    precondition W [liar,>0.3] (p): role(v) == Werewolf;
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
voteRandom(p: Players, v: Players)
{
    precondition Forall p1 in Players: (eq(p1) == p) or (W [liar,<0.3] (p): role(p1) == Werewolf);
    precondition eq(p) != v;
    tmpv(game) = votes(v);
    votes(v) = succ(tmpv(game))
}
die(p: Players)
{
    precondition (votes(p) == 3) or (votes(p) == 4) or (votes(p) == 5);
    dead(p) = True
}
die2(p: Players)
{
    precondition ((votes(p) == 2) and (Forall p1 in Players: ((votes(p1) != 3) and (votes(p1) != 4) and (votes(p1) != 5))));
    dead(p) = True
}
tally()
{
    public (Players) phase(game) = DeathPhase
}
finish()
{
    public (Players) phase(game) = Done
}
showCards()
{
    print(WerewolfCards)
}
showResult()
{
    print(Result)
}
Initial:
phase(game) = Init()
votes(a) = 0()
votes(b) = 0()
votes(c) = 0()
votes(d) = 0()
votes(e) = 0()
tmpv(game) = 0()
max(game) = 0()
maxat(game) = tmp()
liar(a) = 0()
liar(b) = 0()
liar(c) = 0()
liar(d) = 0()
liar(e) = 0()
isLiar(a) = False()
isLiar(b) = False()
isLiar(c) = False()
isLiar(d) = False()
isLiar(e) = False()
swapped(a) = False()
swapped(b) = False()
swapped(c) = False()
swapped(d) = False()
swapped(e) = False()
looks like (a,b,c, d, e): Initial


Execute:

assignCard(a, $carda)
assignRole(a)
assignCard(b, $cardb)
assignRole(b)
assignCard(c, $cardc)
assignRole(c)
assignCard(e, $carde)
assignRole(e)
assignCard(d, $cardd)
assignRole(d)

advancePhase()

play: a: $aia, b: $aib, c: $aic, d: $aid, e: $aie


showCards()
query: Which p in Players: role(p) == Werewolf
showResult()
query: Each p in Players: dead(p) == True


Game:
phase: WWPhase
1 turns
actions: recognizeWerewolves (mandatory)
next: advancePhase()

phase: TMPhase
1 turns
actions: causeTrouble (mandatory)
next: advancePhase()

phase: RPhase
1 turns
actions: rob (mandatory)
next: advancePhase()

phase: SPhase
1 turns
actions: see (optional)
next: advancePhase()

phase: IPhase
1 turns
actions: insomnia (mandatory)
next: advancePhase()

phase: DiscussionPhase
$turns turns
actions: claimRole, claimInitRole, claimRobbed, claimSeen, claimSeenRole, claimSwapped (optional)
next: advancePhase()

phase: VotingPhase
1 turns
actions: voteCertain, vote, vote0, vote1, vote2, vote3, voteRandom (mandatory)
next: tally()

phase: DeathPhase
1 turns
actions: $death (mandatory)
next: finish()
Goals:
(W [liar,>$cert] (self): role(self) == Werewolf) and (phase(game) == DiscussionPhase): Forall p in Players: ((eq(p) == self) or (seen(p) == self) or W [liar,>0.7] (p): (role(self) == Villager));
(W [liar,>$cert] (self): role(self) == Werewolf) and (phase(game) == DiscussionPhase): Forall p in Players: ((eq(p) == self) or (seen(p) == self) or W [liar,>0.7] (p): (role(self) == Seer));
(W [liar,>$cert] (self): role(self) == Werewolf) and (phase(game) == DiscussionPhase): Forall p in Players: ((eq(p) == self) or (seen(p) == self) or W [liar,>0.7] (p): (role(self) == Troublemaker));
(W [liar,>$cert] (self): role(self) == Werewolf) and (phase(game) == DiscussionPhase): Forall p in Players: ((eq(p) == self) or (seen(p) == self) or W [liar,>0.7] (p): (role(self) == Insomniac));
x = seen(self), y = seenRole(self) in (initrole(self) == Seer) and (phase(game) == DiscussionPhase) and (seen(self) != self): W [liar,>0.7] (a): (initrole(x) == y);
x = seen(self), y = seenRole(self) in (initrole(self) == Seer) and (phase(game) == DiscussionPhase) and (seen(self) != self): W [liar,>0.7] (b): (initrole(x) == y);
x = seen(self), y = seenRole(self) in (initrole(self) == Seer) and (phase(game) == DiscussionPhase) and (seen(self) != self): W [liar,>0.7] (c): (initrole(x) == y);
x = seen(self), y = seenRole(self) in (initrole(self) == Seer) and (phase(game) == DiscussionPhase) and (seen(self) != self): W [liar,>0.7] (d): (initrole(x) == y);
x = seen(self), y = seenRole(self) in (initrole(self) == Seer) and (phase(game) == DiscussionPhase) and (seen(self) != self): W [liar,>0.7] (e): (initrole(x) == y);
r = role(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != a): W [liar,>0.7] (a): (role(self) == r);
r = role(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != b): W [liar,>0.7] (b): (role(self) == r);
r = role(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != c): W [liar,>0.7] (c): (role(self) == r);
r = role(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != d): W [liar,>0.7] (d): (role(self) == r);
r = role(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != e): W [liar,>0.7] (e): (role(self) == r);
r = initrole(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != a): W [liar,>0.7] (a): (initrole(self) == r);
r = initrole(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != b): W [liar,>0.7] (b): (initrole(self) == r);
r = initrole(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != c): W [liar,>0.7] (c): (initrole(self) == r);
r = initrole(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != d): W [liar,>0.7] (d): (initrole(self) == r);
r = initrole(self) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != e): W [liar,>0.7] (e): (initrole(self) == r);
x = random(Players) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (W [liar,>$cert] (self): (role(x) == Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != a): W [liar,>0.7] (a): (role(x) == Werewolf);
x = random(Players) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (W [liar,>$cert] (self): (role(x) == Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != b): W [liar,>0.7] (b): (role(x) == Werewolf);
x = random(Players) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (W [liar,>$cert] (self): (role(x) == Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != c): W [liar,>0.7] (c): (role(x) == Werewolf);
x = random(Players) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (W [liar,>$cert] (self): (role(x) == Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != d): W [liar,>0.7] (d): (role(x) == Werewolf);
x = random(Players) in (W [liar,>$cert] (self): (role(self) != Werewolf)) and (W [liar,>$cert] (self): (role(x) == Werewolf)) and (phase(game) == DiscussionPhase) and (eq(self) != e): W [liar,>0.7] (e): (role(x) == Werewolf);
x = random(Players) in (initrole(self) == Seer) and (phase(game) == SPhase): seen(self) == x;
x = random(Players) in (initrole(self) == Robber) and (phase(game) == RPhase): robbed(self) == x;
y = random(Bool) in (initrole(self) == Troublemaker) and (phase(game) == TMPhase): swapped(self) == y;
Done.